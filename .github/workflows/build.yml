# .github/workflows/build.yml
name: Build Claudia

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Global environment variables for consistent builds
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false  # Continue building other platforms even if one fails
      matrix:
        config:
          - name: "Linux (Ubuntu)"
            os: ubuntu-latest
            target: ""
            artifact_path: "src-tauri/target/release/bundle/"
          
          # Windows build currently disabled due to known issues:
          # - Invalid ICO file format (Issue #83)
          # - Unix-only imports in sandbox/executor.rs (Issue #83)
          # Uncomment after fixes are merged:
          # - name: "Windows"
          #   os: windows-latest
          #   target: ""
          #   artifact_path: "src-tauri/target/release/bundle/"
          
          - name: "macOS (Apple Silicon)"
            os: macos-latest
            target: ""
            artifact_path: "src-tauri/target/release/bundle/"
          
          # macOS Universal build currently disabled due to missing binaries:
          # - Missing claude-code-x86_64-apple-darwin binary in binaries/ directory
          # - Only claude-code-aarch64-apple-darwin is available
          # Uncomment and use target: "universal-apple-darwin" after Intel binary is added:
          # - name: "macOS (Universal)"
          #   os: macos-latest
          #   target: "universal-apple-darwin"
          #   artifact_path: "src-tauri/target/universal-apple-darwin/release/bundle/"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Ensure we have the full history for proper version detection
          fetch-depth: 0
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # Add target for universal builds when enabled
          targets: ${{ matrix.config.target }}
          components: rustfmt, clippy
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          # Cache key includes target for cross-compilation support
          key: ${{ matrix.config.os }}-${{ matrix.config.target }}
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Setup Node.js (fallback for Bun compatibility)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install Linux system dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev
      
      - name: Install macOS system dependencies
        if: matrix.config.os == 'macos-latest'
        run: |
          # Ensure Xcode Command Line Tools are available
          xcode-select --install 2>/dev/null || true
          # Install additional dependencies if needed
          # brew install pkg-config (uncomment if required)
      
      # Windows dependencies would go here when Windows builds are enabled:
      # - name: Install Windows system dependencies
      #   if: matrix.config.os == 'windows-latest'
      #   run: |
      #     # Ensure Microsoft C++ Build Tools are available
      #     # choco install visualcpp-build-tools (if using chocolatey)
      
      - name: Install frontend dependencies
        run: bun install
      
      - name: Run frontend type checking
        run: bunx tsc --noEmit
      
      - name: Run Rust formatting check
        working-directory: src-tauri
        run: cargo fmt --all -- --check
      
      - name: Run Rust linting
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run Rust tests
        working-directory: src-tauri
        run: cargo test --verbose
      
      - name: Build application
        run: |
          if [ "${{ matrix.config.target }}" != "" ]; then
            bun run tauri build --target ${{ matrix.config.target }}
          else
            bun run tauri build
          fi
        shell: bash
        env:
          # Code signing environment variables (optional)
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Ensure consistent builds across platforms
          TAURI_BUNDLE_IDENTIFIER: so.asterisk.claudia
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claudia-${{ matrix.config.name }}
          path: |
            ${{ matrix.config.artifact_path }}
            src-tauri/target/release/claudia*
            src-tauri/target/${{ matrix.config.target }}/release/claudia*
          retention-days: 30
          if-no-files-found: warn
      
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.config.name }}
          path: |
            src-tauri/target/release/build/*/out.log
            src-tauri/target/release/build/*/err.log
          retention-days: 7
          if-no-files-found: ignore

  # Security and quality checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        working-directory: src-tauri
        run: cargo audit

  # Release job - creates GitHub releases with all artifacts
  release:
    name: Create Release
    needs: [build, security-audit]
    runs-on: ubuntu-latest
    # Only run on main branch pushes (not PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write  # Required for creating releases
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: claudia-*
          merge-multiple: false
      
      - name: Display artifact structure
        run: find artifacts -type f -name "*" | head -20
      
      - name: Generate release notes
        id: release_notes
        run: |
          echo "## 🚀 Claudia v${{ github.run_number }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Available Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Linux**: AppImage, .deb package" >> release_notes.md
          echo "- **macOS**: .dmg installer (Apple Silicon)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Build Information" >> release_notes.md
          echo "- **Commit**: ${{ github.sha }}" >> release_notes.md
          echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "- **Workflow Run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> release_notes.md
          echo "" >> release_notes.md
          echo "### ⚠️ Platform Support Status" >> release_notes.md
          echo "- ✅ **Linux**: Fully supported" >> release_notes.md
          echo "- ✅ **macOS**: Apple Silicon only (Intel support pending)" >> release_notes.md
          echo "- ❌ **Windows**: Not yet supported (see issues #78, #83)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📋 Recent Changes" >> release_notes.md
          git log --oneline -n 5 --no-decorate >> release_notes.md
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/**/*"
          tag: "v${{ github.run_number }}"
          name: "Claudia v${{ github.run_number }}"
          bodyFile: "release_notes.md"
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: true
          allowUpdates: false
          
      - name: Update latest release info
        run: |
          echo "## Release Published Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release**: [v${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ github.run_number }})" >> $GITHUB_STEP_SUMMARY
          echo "**Download**: Available in [Releases](${{ github.server_url }}/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
